package main

import (
	"fmt"
	"sort"
)

func main() {
	m := []float64{-25.4, -27.0, 13.0, 19.0, 15.5, 24.5, -21.0, 32.5} //вводная последовательность.
	sort.Float64s(m)                                                  //сортируем вводную последовательность.
	keys := make([]int, 0)                                            //инициализируем слайс для записи ключей, указывающих на индексы чисел из следующей группы.
	groups := make([]int, 0)                                          //инициализируем слайс для записи наименований групп чисел.
	for idx, _ := range m {                                           //итерируемся по сортированному сортированной вводной последовательности.
		if idx == 0 {
			keys = append(keys, 0)                     //добавляем в слайс ключей индекс первой группы чисел.
			groups = append(groups, int(m[idx])/10*10) //добавляем в слайс наименование первой группы.
			continue
		}
		if int(m[idx])/10 > int(m[idx-1])/10 { //находим индексы чисел из следующих групп.
			keys = append(keys, idx)                   //пишем в слайс ключей индекс первого числа из следующей группы.
			groups = append(groups, int(m[idx])/10*10) //пишем в слайс наименование следующей группы.
		}
	}

	for i := 0; i < len(groups); i++ {
		if i != len(groups)-1 { //реализуем условие, чтобы не потерять последнее значение последней группы чисел.
			fmt.Printf("%d:%v  ", groups[i], m[keys[i]:keys[i+1]]) //пишем в стандартный поток вывода значения групп чисел.
		} else {
			fmt.Printf("%d:%v  ", groups[i], m[keys[i]:]) //пишем в стандартный поток вывода значение последней группы чисел.
		}
	}
}

//TODO попробывать оптимизировать код
